name: Safe Sync ddns-go

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  GITHUB_WORKSPACE: ${{ github.workspace }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 1. 准备工作区
    - name: Prepare workspace
      run: |
        echo "🛠️ 初始化工作区..."
        rm -rf target-repo source-repo
        mkdir -p target-repo source-repo
        ls -la  # 调试目录结构
        
    # 2. 克隆源仓库
    - name: Clone source repository
      run: |
        echo "⬇️ 克隆源仓库..."
        git clone --depth=1 https://github.com/474706852/ddns-go.git source-repo
        echo "源仓库内容:"
        ls -la source-repo | head -5
        
    # 3. 克隆目标仓库（带详细调试）
    - name: Clone target repository
      run: |
        echo "⬇️ 克隆目标仓库..."
        set -x  # 开启命令回显
        git clone "https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git" target-repo
        set +x
        
        echo "目标仓库.git状态:"
        ls -la target-repo/.git
        
    # 4. 安全同步（保留.git目录）
    - name: Sync repositories
      run: |
        echo "🔄 同步文件..."
        rsync -av --delete \
          --exclude='/.git' \
          --exclude='/.github/workflows' \
          source-repo/ target-repo/
        
        echo "同步后目标仓库内容:"
        ls -la target-repo | head -5
        
    # 5. 配置Git用户
    - name: Configure Git
      run: |
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git config --list  # 显示配置
        
    # 6. 强制变更检测
    - name: Check changes
      id: check_changes
      run: |
        cd target-repo
        
        # 确保在Git仓库中
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          echo "::error::❌ 错误：不在Git仓库中"
          exit 1
        fi
        
        # 强制检测所有变更
        git add -A
        git status
        
        # 检查真实变更（排除.gitignore）
        if [ -n "$(git diff --cached --name-only)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "📝 检测到变更！"
          
          # 保存变更文件列表
          git diff --cached --name-only > $GITHUB_WORKSPACE/changed_files.txt
          echo "变更文件:"
          cat $GITHUB_WORKSPACE/changed_files.txt
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "🟢 无变更检测"
        fi
        
    # 7. 提交变更（强制添加）
    - name: Commit changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cd target-repo
        echo "💾 提交变更..."
        
        # 读取变更文件列表
        changed_files=$(cat $GITHUB_WORKSPACE/changed_files.txt | tr '\n' ',')
        
        # 创建提交消息
        commit_msg="安全同步: $(date -u +'%Y-%m-%d %H:%M UTC')"
        commit_msg+="\n\n变更文件: ${changed_files%,}"
        
        # 提交变更
        git commit -m "$commit_msg"
        git log -1 --oneline  # 显示最新提交
        
    # 8. 强制推送（带详细输出）
    - name: Push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cd target-repo
        echo "🚀 推送变更..."
        
        # 显示远程信息
        git remote -v
        
        # 强制推送
        set -x
        git push origin main
        set +x
        
        echo "✅ 推送成功！"
        
    # 9. Telegram通知（简化版）
    - name: Send Telegram notification
      if: always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
      run: |
        # 基础消息
        status="🟢 同步完成"
        if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
          status="🚀 已推送变更"
        fi
        
        # 创建消息
        message="*ddns-go 同步报告*%0A%0A${status}%0A%0A"
        message+="🕒 时间: $(date -u +'%Y-%m-%d %H:%M UTC')%0A"
        message+="🔗 [工作流详情]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
        
        # 发送通知
        curl -s -X POST \
          "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=$message" \
          -d "parse_mode=Markdown"
        
        echo "📨 Telegram通知已发送"
