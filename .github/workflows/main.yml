name: Safe Sync ddns-go

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点（北京时间8点）自动同步
  workflow_dispatch:     # 允许手动触发

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 准备工作区
    - name: Prepare workspace
      run: |
        rm -rf target-repo source-repo
        mkdir -p target-repo source-repo
        echo "🔄 工作区准备完成"
    
    # 克隆源仓库
    - name: Clone source repository
      run: |
        git clone --depth=1 https://github.com/474706852/ddns-go.git source-repo
        echo "✅ 源仓库克隆完成"
    
    # 克隆目标仓库
    - name: Clone target repository
      run: |
        git clone "https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git" target-repo
        echo "✅ 目标仓库克隆完成"
    
    # 创建同步前哈希快照
    - name: Create pre-sync snapshot
      run: |
        cd target-repo
        # 排除 .github/workflows 目录
        find . -type f ! -path './.github/workflows/*' -exec sha1sum {} \; > ../before-sync.sha1
        echo "📸 创建同步前文件哈希快照完成"
    
    # 文件替换同步（排除 .github/workflows）
    - name: Replace files (excluding workflows)
      run: |
        cd source-repo
        # 替换除 .github/workflows 外的所有文件
        find . -type f ! -path './.github/workflows/*' | while read -r file; do
          if [ -f "../target-repo/$file" ]; then
            echo "🔄 替换文件: $file"
            cp -f "$file" "../target-repo/$file"
          fi
        done
        echo "✅ 文件替换完成（已排除 .github/workflows 目录）"
    
    # 配置Git用户信息
    - name: Configure Git
      run: |
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        echo "⚙️ Git配置完成"
    
    # 检测变更（基于文件哈希）
    - name: Check for changes
      id: changes
      run: |
        cd target-repo
        
        # 创建同步后哈希快照（排除 .github/workflows）
        find . -type f ! -path './.github/workflows/*' -exec sha1sum {} \; > ../after-sync.sha1
        
        # 比较哈希值检测变更
        changed_files=$(diff -U0 ../before-sync.sha1 ../after-sync.sha1 | grep '^-' | cut -d' ' -f3- | sort -u)
        change_count=$(echo "$changed_files" | grep -c .) || change_count=0
        
        # 设置输出变量
        echo "has_changes=$change_count" >> $GITHUB_OUTPUT
        
        # 将变更文件列表保存为文本文件
        echo "$changed_files" | tr '\n' ',' > ../changed_files.txt
        
        if [ "$change_count" -gt 0 ]; then
          echo "📝 检测到变更 ($change_count 个文件):"
          echo "$changed_files" | sed 's/^/• /'
        else
          echo "🟢 无变更检测到"
        fi
        
        # 清理临时文件
        rm -f ../before-sync.sha1 ../after-sync.sha1
    
    # 提交变更（仅在检测到变更时执行）
    - name: Commit changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        
        # 读取变更文件列表
        changed_files=$(cat ../changed_files.txt | sed 's/,$//')
        
        # 格式化提交消息
        commit_msg="安全同步: $(date -u +'%Y-%m-%d %H:%M UTC')"
        if [ -n "$changed_files" ]; then
          commit_msg="$commit_msg%0A变更文件: $changed_files"
        fi
        
        git add -u
        git commit -m "$commit_msg"
        echo "✅ 已提交 ${{ steps.changes.outputs.has_changes }} 个变更"
    
    # 推送变更（仅在检测到变更时执行）
    - name: Push changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        git push origin main
        echo "🚀 已成功推送变更到 GitHub"
    
    # 发送Telegram通知（总是执行）
    - name: Send Telegram notification
      if: always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
      run: |
        # 确定通知消息
        if [ "${{ steps.changes.outputs.has_changes }}" == "0" ]; then
          message="*ddns-go 同步报告*%0A%0A🟢 *无文件变更*%0A%0A🕒 完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')%0A🔗 [工作流详情]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
        elif [ "${{ steps.changes.outputs.has_changes }}" != "0" ]; then
          # 读取变更文件列表
          changed_files=$(cat ../changed_files.txt | sed 's/,$//')
          
          # 格式化变更文件列表
          changed_files_formatted=$(echo "$changed_files" | tr ',' '\n' | head -5 | sed 's/^/• /')
          
          if [ "${{ steps.changes.outputs.has_changes }}" -gt 5 ]; then
            changed_files_formatted="$changed_files_formatted%0A• 等${{ steps.changes.outputs.has_changes }}个文件..."
          fi
          
          message="*ddns-go 同步报告*%0A%0A🚀 *${{ steps.changes.outputs.has_changes }}个文件变更*%0A$changed_files_formatted%0A%0A🕒 完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')%0A🔗 [工作流详情]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
        else
          message="*ddns-go 同步报告*%0A%0A⚠️ *无法确定变更状态*%0A%0A🕒 完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')%0A🔗 [工作流详情]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
        fi
        
        # 发送Telegram通知
        curl -s -X POST \
          "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=$message" \
          -d "parse_mode=Markdown" \
          -d "disable_web_page_preview=true"
        
        echo "✅ Telegram 通知已发送"
        
        # 清理临时文件
        rm -f ../changed_files.txt
    
    # 最终状态报告
    - name: Final status report
      if: always()
      run: |
        if [ "${{ steps.changes.outputs.has_changes }}" == "0" ]; then
          echo "::notice title=同步报告::🟢 无变更需要推送"
        elif [ "${{ steps.changes.outputs.has_changes }}" != "0" ]; then
          echo "::notice title=同步报告::🚀 已成功推送 ${{ steps.changes.outputs.has_changes }} 个变更"
        else
          echo "::warning title=同步报告::⚠️ 无法确定变更状态"
        fi
        echo "🕒 同步完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
