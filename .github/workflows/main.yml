name: Safe Sync ddns-go

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 准备工作区
    - name: Prepare workspace
      run: |
        rm -rf target-repo source-repo
        mkdir -p target-repo source-repo
    
    # 克隆源仓库
    - name: Clone source repository
      run: |
        git clone --depth=1 https://github.com/474706852/ddns-go.git source-repo
    
    # 克隆目标仓库
    - name: Clone target repository
      run: |
        git clone "https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git" target-repo
    
    # 安全文件同步
    - name: Safe file sync
      run: |
        cd source-repo
        find . -type f | while read -r file; do
          if [ -f "../target-repo/$file" ]; then
            echo "更新文件: $file"
            cp -f "$file" "../target-repo/$file"
          fi
        done
        echo "✅ 安全同步完成"
    
    # 配置Git用户信息
    - name: Configure Git
      run: |
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
    
    # 完全绕过Git命令检测变更
    - name: Check for changes
      id: changes
      run: |
        cd target-repo
        
        # 创建文件哈希快照
        find . -type f ! -path './.git/*' -exec sha1sum {} \; > ../before-sync.sha1
        
        # 执行同步
        cd ../source-repo
        find . -type f | while read -r file; do
          if [ -f "../target-repo/$file" ]; then
            cp -f "$file" "../target-repo/$file"
          fi
        done
        
        # 比较文件哈希
        cd ../target-repo
        find . -type f ! -path './.git/*' -exec sha1sum {} \; > ../after-sync.sha1
        
        # 检测变更
        changed_files=$(diff -U0 ../before-sync.sha1 ../after-sync.sha1 | grep '^-' | cut -d' ' -f3- | sort -u)
        change_count=$(echo "$changed_files" | grep -c .) || change_count=0
        
        # 设置输出变量
        echo "has_changes=$change_count" >> $GITHUB_OUTPUT
        echo "changed_files=$(echo "$changed_files" | tr '\n' ',')" >> $GITHUB_OUTPUT
        
        if [ "$change_count" -gt 0 ]; then
          echo "📝 检测到变更 ($change_count 个文件):"
          echo "$changed_files" | sed 's/^/• /'
        else
          echo "🟢 无变更检测到"
        fi
        
        # 清理临时文件
        rm -f ../before-sync.sha1 ../after-sync.sha1
    
    # 提交变更（仅在检测到变更时执行）
    - name: Commit changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        git add -u
        
        # 格式化提交消息
        commit_msg="安全同步: $(date -u +'%Y-%m-%d %H:%M UTC')"
        if [ -n "${{ steps.changes.outputs.changed_files }}" ]; then
          commit_msg="$commit_msg%0A变更文件: ${{ steps.changes.outputs.changed_files }}"
        fi
        
        git commit -m "$commit_msg"
        echo "✅ 已提交 ${{ steps.changes.outputs.has_changes }} 个变更"
    
    # 推送变更（仅在检测到变更时执行）
    - name: Push changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        git push origin main
        echo "🚀 已成功推送以下变更到 GitHub:"
        echo "${{ steps.changes.outputs.changed_files }}" | tr ',' '\n'
    
    # 准备Telegram通知消息
    - name: Prepare Telegram message
      id: telegram-msg
      if: always()
      run: |
        # 确定通知消息
        if [ "${{ steps.changes.outputs.has_changes }}" == "0" ]; then
          status="🟢 *无文件变更*"
        elif [ "${{ steps.changes.outputs.has_changes }}" != "0" ]; then
          # 格式化变更文件列表
          changed_files_formatted=$(echo "${{ steps.changes.outputs.changed_files }}" | tr ',' '\n' | head -5 | sed 's/^/• /')
          
          if [ "${{ steps.changes.outputs.has_changes }}" -gt 5 ]; then
            changed_files_formatted="$changed_files_formatted%0A• 等${{ steps.changes.outputs.has_changes }}个文件..."
          fi
          
          status="🚀 *${{ steps.changes.outputs.has_changes }}个文件变更*%0A$changed_files_formatted"
        else
          status="⚠️ *无法确定变更状态*"
        fi
        
        # 添加时间信息
        timestamp="🕒 完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        
        # 添加工作流链接
        workflow_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        link="🔗 [工作流详情]($workflow_url)"
        
        # 组合消息
        message="*ddns-go 同步报告*%0A%0A$status%0A%0A$timestamp%0A$link"
        
        # 设置输出
        echo "message=$message" >> $GITHUB_OUTPUT
        echo "::notice::Telegram 消息已准备"
    
    # 发送Telegram通知（总是执行）
    - name: Send Telegram notification
      if: always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
      run: |
        # 发送Telegram通知
        curl -s -X POST \
          "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=${{ steps.telegram-msg.outputs.message }}" \
          -d "parse_mode=Markdown" \
          -d "disable_web_page_preview=true"
        
        echo "✅ Telegram 通知已发送"
    
    # 备用通知（如果没有配置Telegram）
    - name: Final status report
      if: always() && (env.TELEGRAM_BOT_TOKEN == '' || env.TELEGRAM_CHAT_ID == '')
      run: |
        if [ "${{ steps.changes.outputs.has_changes }}" == "0" ]; then
          echo "::notice title=同步报告::🟢 无变更需要推送"
        elif [ "${{ steps.changes.outputs.has_changes }}" != "0" ]; then
          echo "::notice title=同步报告::🚀 已成功推送 ${{ steps.changes.outputs.has_changes }} 个变更"
          echo "变更文件:"
          echo "${{ steps.changes.outputs.changed_files }}" | tr ',' '\n'
        else
          echo "::warning title=同步报告::⚠️ 无法确定变更状态"
        fi
        echo "🕒 同步完成时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
