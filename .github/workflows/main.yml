name: Safe Sync ddns-go

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点运行
  workflow_dispatch:     # 支持手动触发

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  GITHUB_WORKSPACE: ${{ github.workspace }}
  SOURCE_REPO_URL: "https://github.com/474706852/ddns-go"  # 源仓库URL
  TARGET_REPO_URL: "https://github.com/13ztop/ddns-go"    # 目标仓库URL
  SYNC_EXCLUDE: "--exclude='/.git' --exclude='/.github/workflows'"  # 同步排除项

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 1. 初始化工作区
    - name: Prepare workspace
      run: |
        echo "🛠️ 初始化工作区..."
        rm -rf target-repo source-repo
        mkdir -p target-repo source-repo
        
    # 2. 克隆源仓库
    - name: Clone source repository
      run: |
        echo "⬇️ 克隆源仓库..."
        git clone --depth=1 ${{ env.SOURCE_REPO_URL }}.git source-repo
        
    # 3. 克隆目标仓库
    - name: Clone target repository
      run: |
        echo "⬇️ 克隆目标仓库..."
        git clone "https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git" target-repo
        
    # 4. 安全同步目录
    - name: Sync repositories
      run: |
        echo "🔄 同步文件..."
        rsync -a --delete \
          ${{ env.SYNC_EXCLUDE }} \
          source-repo/ target-repo/
        
    # 5. 配置Git用户
    - name: Configure Git
      run: |
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    # 6. 变更检测
    - name: Detect changes
      id: detect_changes
      run: |
        cd target-repo
        
        # 获取变更状态
        git add -A
        changes=$(git status --porcelain)
        
        if [ -z "$changes" ]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "🟢 无变更检测"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # 分类变更文件
          added_files=$(echo "$changes" | grep '^A' | cut -c4-)
          modified_files=$(echo "$changes" | grep '^ M' | cut -c4-)
          deleted_files=$(echo "$changes" | grep '^ D' | cut -c4-)
          
          # 保存变更列表
          mkdir -p $GITHUB_WORKSPACE/change_details
          echo "$added_files" > $GITHUB_WORKSPACE/change_details/added_files.txt
          echo "$modified_files" > $GITHUB_WORKSPACE/change_details/modified_files.txt
          echo "$deleted_files" > $GITHUB_WORKSPACE/change_details/deleted_files.txt
        fi
        
    # 7. 提交变更
    - name: Commit changes
      if: steps.detect_changes.outputs.has_changes == 'true'
      run: |
        cd target-repo
        git add -A
        git commit -m "安全同步: $(date -u +'%Y-%m-%d %H:%M UTC')"
        
    # 8. 推送变更
    - name: Push changes
      if: steps.detect_changes.outputs.has_changes == 'true'
      run: |
        cd target-repo
        git push origin main
        
    # 9. 增强的Telegram通知（添加仓库链接）
    - name: Send Telegram notification
      if: always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
      run: |
        # 设置字符编码
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8
        
        # 工作流详情链接
        workflow_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        
        # 基础消息
        if [ "${{ steps.detect_changes.outputs.has_changes }}" = "true" ]; then
          status="🚀 同步完成"
          # 读取变更文件
          added_files=$(cat $GITHUB_WORKSPACE/change_details/added_files.txt 2>/dev/null || true)
          modified_files=$(cat $GITHUB_WORKSPACE/change_details/modified_files.txt 2>/dev/null || true)
          deleted_files=$(cat $GITHUB_WORKSPACE/change_details/deleted_files.txt 2>/dev/null || true)
          
          # 构建变更描述
          changes_desc=""
          if [ -n "$added_files" ]; then
            changes_desc+="➕ 新增: $(echo "$added_files" | wc -l)个文件\n"
          fi
          if [ -n "$modified_files" ]; then
            changes_desc+="✏️ 修改: $(echo "$modified_files" | wc -l)个文件\n"
          fi
          if [ -n "$deleted_files" ]; then
            changes_desc+="❌ 删除: $(echo "$deleted_files" | wc -l)个文件\n"
          fi
          
          # 显示前3个变更文件
          sample_changes=""
          if [ -n "$added_files" ]; then
            sample_changes+="新增:\n$(echo "$added_files" | head -3 | sed 's/^/- /')\n\n"
          fi
          if [ -n "$modified_files" ]; then
            sample_changes+="修改:\n$(echo "$modified_files" | head -3 | sed 's/^/- /')\n\n"
          fi
          if [ -n "$deleted_files" ]; then
            sample_changes+="删除:\n$(echo "$deleted_files" | head -3 | sed 's/^/- /')\n\n"
          fi
        else
          status="🟢 无变更"
          changes_desc=""
          sample_changes=""
        fi
        
        # 创建完整的消息
        message="*📦 ddns-go 安全同步报告*\n\n"
        message+="${status}\n\n"
        
        # 添加仓库链接
        message+="🌐 *仓库信息:*\n"
        message+="- 源仓库: [${{ env.SOURCE_REPO_URL }}](${{ env.SOURCE_REPO_URL }})\n"
        message+="- 目标仓库: [${{ env.TARGET_REPO_URL }}](${{ env.TARGET_REPO_URL }})\n\n"
        
        if [ -n "$changes_desc" ]; then
          message+="${changes_desc}\n"
        fi
        
        message+="🕒 时间: $(date -u +'%Y-%m-%d %H:%M UTC')\n"
        message+="🔗 [工作流详情]($workflow_url)\n"
        
        if [ -n "$sample_changes" ]; then
          message+="\n*变更示例:*\n"
          message+="${sample_changes}"
        fi
        
        # 使用printf正确格式化消息
        formatted_message=$(printf "%b" "$message")
        
        # 创建JSON数据
        json_data=$(jq -n \
          --arg chat_id "$TELEGRAM_CHAT_ID" \
          --arg text "$formatted_message" \
          '{
            chat_id: $chat_id,
            text: $text,
            parse_mode: "Markdown",
            disable_web_page_preview: true
          }')
        
        # 保存JSON到文件
        echo "$json_data" > payload.json
        
        # 发送通知
        curl -s -X POST \
          "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -H "Content-Type: application/json" \
          -d "@payload.json"
        
        echo "📨 Telegram通知已发送"
