name: Safe Sync ddns-go

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 1. 准备全新工作空间
    - name: Clean workspace
      run: |
        rm -rf target-repo source-repo
        mkdir target-repo source-repo
    
    # 2. 直接克隆源仓库
    - name: Clone source repository
      run: |
        git clone --depth=1 https://github.com/474706852/ddns-go.git source-repo
    
    # 3. 直接克隆目标仓库（使用显式URL）
    - name: Clone target repository
      run: |
        git clone --depth=1 https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git target-repo
    
    # 4. 安全文件同步
    - name: Safe file sync
      run: |
        cd source-repo
        find . -type f | while read file; do
          if [ -f "../target-repo/$file" ]; then
            cp -v "$file" "../target-repo/$file"
          fi
        done
        echo "✅ 安全同步完成"
    
    # 5. 验证并修复Git仓库状态
    - name: Repair Git repository
      run: |
        cd target-repo
        
        # 验证仓库完整性
        if ! git fsck --full --strict; then
          echo "⚠️ 仓库损坏，尝试修复..."
          
          # 备份重要文件
          mkdir -p ../backup
          find . -type f ! -path './.git/*' -exec cp --parents {} ../backup/ \;
          
          # 完全重建仓库
          rm -rf .git
          git init
          git remote add origin https://${{ github.actor }}:${{ secrets.SYNC_TOKEN }}@github.com/13ztop/ddns-go.git
          git fetch --depth=1 origin main
          git checkout -b main FETCH_HEAD
          
          # 恢复文件
          find ../backup -type f ! -path '../backup/.git/*' -exec cp --parents {} . \;
          rm -rf ../backup
        fi
        
        # 确保HEAD有效
        git rev-parse HEAD
        git reset --hard
        git clean -f -d
    
    # 6. 配置Git用户信息
    - name: Configure Git
      run: |
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
    
    # 7. 检查变更
    - name: Check for changes
      id: changes
      run: |
        cd target-repo
        # 使用新方法设置输出
        change_count=$(git status --porcelain | wc -l | tr -d ' ')
        echo "has_changes=$change_count" >> $GITHUB_OUTPUT
        echo "变更数量: $change_count"
        git status  # 调试输出
    
    # 8. 提交变更
    - name: Commit changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        git add -u
        git commit -m "Safe sync: $(date -u +'%Y-%m-%d %H:%M UTC')"
        echo "✅ 变更已提交"
    
    # 9. 推送变更
    - name: Push changes
      if: ${{ steps.changes.outputs.has_changes != '0' }}
      run: |
        cd target-repo
        git push origin main
        echo "🚀 变更已推送到 GitHub"
        
    # 10. 无变更处理
    - name: No changes detected
      if: ${{ steps.changes.outputs.has_changes == '0' }}
      run: echo "🟢 无变更可提交"
